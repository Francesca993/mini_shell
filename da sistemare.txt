FRA:
- sistemare return builtins 
- sistemare execute_builtin con i return delle builtins 

controllare gestione degli errori: 
- l'errore stampa spesso due volte ( check di tutti gli errori e le uscite ) check con exit shell + funzioni execution 
- verificare uscite builtin ( stampa errori ) e togliere "minishell:" dai messaggi di errori 

- controllare exit status e aggiornarlo sempre ( check ) - da fare entrambe
-> exit status sulle builtin ok, mancava su env, ora controllo anche il resto del parsing
-> dovrei aver tolto la scritta minishell: da un pò di parti, poi ricontrollo per bene tutto

stampa:

- controllo \n dove invece ha stampato spazio 


SUSA :
gestione segnali: 
- padre gestisce per non chiudere la shell
- figlio ripristina i segnali di default 
- guarda subject per i segnali 

- check exit status ultimo comando in pipe 
- padre salva pid figlio 


==========================
No, non è necessario chiamare rl_clear_history() alla fine del main, perché:
clear_history() è già sufficiente per liberare la cronologia usata da readline.
clear_history() cancella l'intera cronologia e libera la memoria associata.
rl_clear_history() è un alias obsoleto o non sempre definito a seconda delle versioni di readline.
Hai già incluso clear_history() alla fine del ciclo, quindi chiamare anche rl_clear_history() sarebbe ridondante.
=========================

--> norminettato main, lexer e utils, ho fatto una funzione free_matrix e l ho utilizzata per snellire la free_pipeline 
    e ho cancellato free_partial_tokens che dava fastidio ed era inutile e l ho sostituita
